// <auto-generated />
using System;
using CoreFlow.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoreFlow.Infrastructure.Migrations
{
    [DbContext(typeof(CoreFlowContext))]
    [Migration("20250715054754_Latest")]
    partial class Latest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-preview.5.25277.114")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoreFlow.Domain.Entities.AppSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_app_systems");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_app_systems_name");

                    b.ToTable("app_systems", (string)null);
                });

            modelBuilder.Entity("CoreFlow.Domain.Entities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HostName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("host_name");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ip_address");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password");

                    b.Property<Guid>("ServerBlockId")
                        .HasColumnType("uuid")
                        .HasColumnName("server_block_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_servers");

                    b.HasIndex("ServerBlockId")
                        .HasDatabaseName("ix_servers_server_block_id");

                    b.HasIndex("IpAddress", "ServerBlockId")
                        .HasDatabaseName("ix_servers_ip_address_server_block_id");

                    b.ToTable("servers", (string)null);
                });

            modelBuilder.Entity("CoreFlow.Domain.Entities.ServerBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AppSystemId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_system_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_server_blocks");

                    b.HasIndex("AppSystemId")
                        .HasDatabaseName("ix_server_blocks_app_system_id");

                    b.HasIndex("Name", "AppSystemId")
                        .IsUnique()
                        .HasDatabaseName("ix_server_blocks_name_app_system_id");

                    b.ToTable("server_blocks", (string)null);
                });

            modelBuilder.Entity("CoreFlow.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_users_user_name");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CoreFlow.Domain.Entities.UserAppSystem", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("AppSystemId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_system_id");

                    b.HasKey("UserId", "AppSystemId")
                        .HasName("pk_user_app_system");

                    b.HasIndex("AppSystemId")
                        .HasDatabaseName("ix_user_app_system_app_system_id");

                    b.ToTable("user_app_system", (string)null);
                });

            modelBuilder.Entity("CoreFlow.Domain.Entities.Server", b =>
                {
                    b.HasOne("CoreFlow.Domain.Entities.ServerBlock", "ServerBlock")
                        .WithMany("Servers")
                        .HasForeignKey("ServerBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_servers_server_blocks_server_block_id");

                    b.Navigation("ServerBlock");
                });

            modelBuilder.Entity("CoreFlow.Domain.Entities.ServerBlock", b =>
                {
                    b.HasOne("CoreFlow.Domain.Entities.AppSystem", null)
                        .WithMany()
                        .HasForeignKey("AppSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_blocks_app_systems_app_system_id");
                });

            modelBuilder.Entity("CoreFlow.Domain.Entities.UserAppSystem", b =>
                {
                    b.HasOne("CoreFlow.Domain.Entities.AppSystem", "AppSystem")
                        .WithMany("_userAppSystems")
                        .HasForeignKey("AppSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_app_system_app_systems_app_system_id");

                    b.HasOne("CoreFlow.Domain.Entities.User", "User")
                        .WithMany("UserAppSystems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_app_system_users_user_id");

                    b.Navigation("AppSystem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreFlow.Domain.Entities.AppSystem", b =>
                {
                    b.Navigation("_userAppSystems");
                });

            modelBuilder.Entity("CoreFlow.Domain.Entities.ServerBlock", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("CoreFlow.Domain.Entities.User", b =>
                {
                    b.Navigation("UserAppSystems");
                });
#pragma warning restore 612, 618
        }
    }
}
